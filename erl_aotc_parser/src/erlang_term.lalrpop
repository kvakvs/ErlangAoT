/// This parser takes Erlang Term as a string, and parses it.
///
//use std::str::FromStr; // for numeric types ::from_str()
use erl_shared::fterm::FTerm;
use token::{Token};
use lexer::{LexicalError};

grammar;

pub DottedTerm: FTerm = {
  <t:Term> Dot => t
};

pub Term: FTerm = {
  // A list is 0 or more terms separated by comma (tolerates trailing comma)
  LSquareBracket <lst:Terms> RSquareBracket => match lst.len() {
    0 => FTerm::EmptyList,
    _ => FTerm::List(lst),
  },
  // A tuple is 0 or more terms separated by comma (tolerates trailing comma)
  LCurlyBracket <lst:Terms> RCurlyBracket => match lst.len() {
    0 => FTerm::EmptyTuple,
    _ => FTerm::Tuple(lst),
  },
  <s:StringLiteral> => FTerm::String(s),
  <a:AtomLiteral> => FTerm::Atom(a),
  <i:IntLiteral> => FTerm::Int64(i),
  <b:BinaryLiteral> => FTerm::Binary(b),
};

// Comma-separated list of Terms
Terms = CommaMacro<Term>; // (0)

// A generic macro which defines a comma-separated list of T (see the LALRPOP
// tutorial, section on Macros)
CommaMacro<T>: Vec<T> = {
  <v:(<T> Comma)*> <e:T?> => match e {
    None => v,
    Some(e) => {
      let mut v1 = v;
      v1.push(e);
      v1
    }
  }
};


extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    Dot => Token::Dot,
    Comma => Token::Comma,
 
    LSquareBracket => Token::LSquareBracket,
    LCurlyBracket => Token::LCurlyBracket,
    LParen => Token::LParen,

    RSquareBracket => Token::RSquareBracket,
    RCurlyBracket => Token::RCurlyBracket,
    RParen => Token::RParen,

    StringLiteral => Token::StringLiteral(<String>),
    AtomLiteral => Token::AtomLiteral(<String>),
    IntLiteral => Token::IntLiteral(<i64>),
    BinaryLiteral => Token::BinaryLiteral(<Vec<u8>>)
  }
}